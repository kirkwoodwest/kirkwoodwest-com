{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome-to-our-interdimensional-space","title":"Welcome to Our Interdimensional Space","text":"<p>Join us in the Squirrel World, our digital realm reflecting our unique creative spirit. As we craft this virtual world, we invite you to discover and evolve alongside us.</p>"},{"location":"#our-music","title":"Our Music","text":"<p>Check out our release catalog, mixes, and free music. Or Download or Stream our music from the following places, or wherever you get music. Bandcamp, Beatport, Juno Download, Youtube Music</p>"},{"location":"#music-services-training","title":"Music Services &amp; Training","text":"<p>I offer a bit of music services ranging from learning Bitwig, live performance setups, Bitwig Controller API, Mixing &amp; Mastering, UI/UX Design and Prototyping. For more information, visit services.</p>"},{"location":"#more","title":"More","text":"<p>Learn more about Kirkwood West. We are the party masters wearing fancy threads.</p>"},{"location":"#stay-tuned","title":"Stay Tuned","text":"<p>Keep an eye on my upcoming notes about working with the Bitwig API and delving into Hexler's Touch OSC MKII. We're thrilled to keep delivering fresh music. Stay in the loop for the latest from Kirkwood West.</p> <p>Ctrl+Alt+Del</p> <p>"},{"location":"about/","title":"About","text":""},{"location":"about/#me","title":"Me","text":"<p>Hello, I'm Kirkwood West. My journey in music and technology began in the 80s, a time marked by the emergence of groundbreaking electronic devices. Armed with a boombox, a Casio keyboard, a microphone, and an Atari 800, I embarked on a path that would shape my future. As a four year old, tools were my early teachers, guiding me through my first experiences in sound manipulation and digital creativity.</p> <p>From experimenting with the SK-1's sampling capabilities to exploring the basics of programming on the Atari 800, each experience deepened my understanding and passion for music and technology. My approach has always been about blending the familiar with the innovative, continually pushing boundaries to discover new possibilities in sound and digital art. I'm driven by a curiosity to explore the uncharted territories of audio and technology, always in pursuit of the next breakthrough in the ever-evolving landscape of music.</p> <p></p>"},{"location":"about/#the-label","title":"The Label","text":"<p>Kirkwood West isn't just a label; it\u2019s a dynamic journey into the depths of electronic music. What began as a personal mission to reconnect with my past has grown into a collaborative venture, involving a close-knit circle of friends and family. Together, we explore diverse musical landscapes, blending timeless influences with contemporary sounds.</p> <p>Our goal is to craft music that not only resonates with listeners today but also carries the potential to endure and inspire future generations. Kirkwood West serves as a bridge from our studio to the wider world, enabling us to share our creations far and wide. This label is our cosmic vessel, delivering our creations from the studio to the world, fostering connections that transcend the ordinary, reaching into the heart of the musical cosmos.</p> <p></p>"},{"location":"about/#squirrels-our-interdimensional-companions","title":"Squirrels: Our Interdimensional Companions","text":"<p>At the core of Kirkwood West is the spirit of the squirrel, our emblem and guide in this interdimensional journey. In the world of Kirkwood West, we embrace the squirrel's essence \u2013 agile, inventive, and persistently creative. Just as squirrels gather and build, we too collect diverse sonic elements and construct intricate soundscapes. They are our totem in the music realm, symbolizing our relentless pursuit of creativity and our ability to adapt and thrive in the ever-changing landscape of music. In the squirrel world, we find our kinship; it's a realm where our artistic visions take shape and where every creation is a part of this larger, interconnected ecosystem. Here, in our squirrel-inspired universe, we channel the energy and ingenuity of these spirited creatures, crafting and releasing music that is as dynamic and resourceful as our namesake.</p> <p></p> <p>I  SQUIRREL</p>"},{"location":"connect_complete/","title":"Thank You","text":"<p>Thanks for reaching out and connecting. I'm usually deep working and don't respond immediately to email. I check requests on average and once a week and try to respond to everyone that I can</p>"},{"location":"contact/","title":"Contact","text":"<p>Lets get in touch. Fill out some details. Send it over the magical www and you'll have a response shortly.</p> Name Email Message Submit"},{"location":"merch/","title":"Merch","text":"<p>SOLD OUT</p> <p>Sorry We are currently sold out of merch at the moment. We are working with distributers and makers to create more kirkwood west style merch. If you are one of these people please contact.</p>"},{"location":"merch/#send-me-to-space-2024","title":"Send Me To Space 2024","text":""},{"location":"merch/#sold-out","title":"SOLD OUT!","text":""},{"location":"music/","title":"Music","text":""},{"location":"music/#music","title":"Music","text":""},{"location":"music/#releases","title":"Releases","text":"<p>Catalog of Kirkwood West Releases</p> Catalog Artist Title BPM Date 002 TH3WORM Wake Up On Time 106 2023-10-28 001 RCS &amp; TH3WORM Digital Zone 101-110 2023-08-11"},{"location":"music/#th3worm-wake-up-on-time","title":"TH3WORM: Wake Up On Time","text":"Wake Up On Time by TH3WORM <p>A late night party fueled by hypnotic grooves and pulsing bass. Our minds sink deeper into the cosmic matrix. We enter an altered state of consciousness. The Third Eye expands. The Soul is transformed. We can never go back.</p> <p>TH3WORMs first solo release is quintessential Techno Boogie Fusion. An alchemy of minimal, dub, and post disco funk. The bass rolls and the chords echo drawing listeners into its depths. \"Wake Up on Time\" alongside \"Deep Dream\" showcase the next mutation of this formula. Through a blend of vintage hardware warmth and cutting-edge software precision, TH3WORM is digging a deep tunnel in the techno soundscape.</p> <ul> <li>Written &amp; Mixed by TH3WORM</li> <li>Mastered by Miro Pajic</li> </ul>"},{"location":"music/#rcs-and-th3worm-digital-zone","title":"RCS AND TH3WORM: Digital Zone","text":"Wake Up On Time by TH3WORM <p>An insidious force has overtaken global civilization. Digital technology has crept into every aspect of our lives. It constantly watches us, records us, and seeks to understand us. As we engage with it, the network begins to manipulate our thoughts and the way we move through this world. This process of digitalization has become so ubiquitous that it defines what it means to be human in 2023. We have entered the digital zone but will you be able to escape?</p> <p>RCS &amp; TH3WORM have been homies since the first grade. They grew up together in school, playing video games, riding skateboards, mixing records , writing tracks and throwing parties. It was destined to be that 30 years later they would come together on a collaboration.</p> <p>Music is essential to their lives as air is to most. They use an extensive collection of records, microphones, vintage analog gear &amp; modern recording systems. The two travel to each others studios time after time to compose and dial in the best gear for each sound layer. This is the process that they use for a sound that is undeniably dope.</p> <ul> <li>Written &amp; Mixed by TH3WORM &amp; RCS</li> <li>Mastered by Miro Pajic</li> </ul>"},{"location":"music/#mixes","title":"Mixes","text":"<p>Mixes and Podcasts by Kirkwood West</p> kirkwoodwest \u00b7 Kirkwood West - Live DJ Set At Luna 2012-06-20 kirkwoodwest \u00b7 Kirkwood West - Live DJ on WEFT Sessions Sept 2011"},{"location":"music/#remixes","title":"Remixes","text":""},{"location":"music/#free-music","title":"Free Music","text":"<p>Concept music created to explore the core sound of Kirkwood West</p> kirkwoodwest \u00b7 Music for you to download. &lt;3"},{"location":"parties/","title":"Parties","text":"<p>Squirrels really like to party. This is a collection of events we've done over the years.</p> <p> </p>"},{"location":"projects/","title":"Projects","text":"<p>These are the current projects going on here at kirkwood west.</p>"},{"location":"projects/#th3worm","title":"TH3WORM","text":""},{"location":"projects/#open-woods-bitwig-studio-extensions","title":"Open Woods - Bitwig Studio Extensions","text":""},{"location":"projects/#midi-controllers","title":"Midi Controllers","text":""},{"location":"services/","title":"Services","text":""},{"location":"services/#bitwig-training","title":"Bitwig Training","text":"<p> As a certified Bitwig Studio trainer, I offer comprehensive training tailored to your needs. Whether you're transitioning from another DAW or starting from scratch, I'll guide you through Bitwig's unique features and workflow, ensuring you gain a solid understanding and skill set to fully utilize this powerful software.</p>"},{"location":"services/#bitwig-live-rig-consulting","title":"Bitwig Live Rig Consulting","text":"<p>Looking to take your studio skills to the stage? I specialize in constructing live sets in Bitwig, covering a wide range of methods including live looping, clip launching, and various control setups (MIDI-based, hardware-based, or mixed). Let's collaborate to bring your live performance vision to life.</p>"},{"location":"services/#bitwig-controller-integration-automation","title":"Bitwig Controller Integration &amp; Automation","text":"<p>Enhance your Bitwig experience by customizing your controller integration to fit your workflow. Utilizing the Bitwig API, I can help you build any type of control connection you desire. Need advanced automation? From basic tasks like loading a VST to more complex presets, I've got you covered.</p>"},{"location":"services/#touch-osc","title":"Touch OSC","text":"<p>Dive into the world of Touch OSC with my guidance. Whether you're looking to grasp the basics or delve into more advanced aspects, I can assist you in building or designing your dream interface, ensuring it perfectly matches your specifications and enhances your creative process.</p>"},{"location":"services/#mixing-mastering","title":"Mixing &amp; Mastering","text":"<p>Offering professional mixing and mastering services, I focus on enhancing the sound quality of your music. Specializing in album and EP mastering, I ensure your tracks are balanced, clear, and ready for distribution. Whether it's a single track or a full album, each project is treated with the utmost care and precision to meet industry standards.</p>"},{"location":"services/#uiux-design","title":"UI/UX Design","text":"<p>With a keen eye for design and user experience, I offer UI/UX services tailored to your specific needs. This includes designing intuitive and visually appealing interfaces for websites, apps, and digital products, ensuring a seamless and engaging user experience.</p>"},{"location":"services/#get-connected","title":"Get Connected","text":"<p>Interested in exploring the world of Bitwig Studio, live performance setups, controller integration, or seeking professional mixing and mastering services? I'm here to help. Whether you have a specific project in mind or just starting out and need guidance, I'm ready to assist you in achieving your musical and technical goals.</p> <p>For any inquiries, collaborations, or to discuss your project, please don't hesitate to reach out. Click the link below to access my contact form, and I'll get back to you as soon as possible.</p> <p>contact me</p> <p>Stay connected and follow me on social media for updates, tips, and more insights into the world of music production and design.</p> <p>Bandcamp | Youtube | Instagram </p> <p>Looking forward to hearing from you and working together to bring your ideas to life!</p>"},{"location":"notes/","title":"Notes","text":"<p>These are some of my working notes and things I find of interest. This site was inspired by my friend and mentor Ronny Pries, the dark lord of the Vault community. Here you will find the deeper digital garden of things I'm working on or thinking about.</p>"},{"location":"notes/#touch-osc","title":"Touch OSC","text":"<p>I am a huge fan of touch for making custom interface for music. I made several references for things I found useful when working in the Touch OSC Editor. </p> <ul> <li>Touch OSC Stuff</li> </ul>"},{"location":"notes/#bitwig-api","title":"Bitwig API","text":"<p>Keeping the secrets of the bitwig api until open woods is released into the wild. </p> <ul> <li>Bitwig Extensions</li> </ul>"},{"location":"notes/bitwig-extensions/","title":"Bitwig Extensions","text":"<p>Still working on the Open Woods Project. For now check out the bitwig library of extensions. https://github.com/bitwig/bitwig-extensions</p>"},{"location":"notes/bitwig-extensions/#my-super-bank-class","title":"My Super Bank Class!","text":"Super Bank<pre><code>public class SuperBank {\n\n\n  private final HashMap&lt;CursorTrack, ArrayList&lt;BooleanValue&gt;&gt; cursor_track_equals_values;\n  private final ArrayList&lt;SuperBankDevices&gt; track_devices;\n  int NUM_TRACKS = 96;\n  int NUM_SCENES = 64;\n\n  TrackBank trackBank;\n\n\n  private ControllerHost host;\n\n  public SuperBank(ControllerHost host) {\n    this.host = host;\n    track_devices = new ArrayList&lt;SuperBankDevices&gt;();\n\n    trackBank = host.createTrackBank(NUM_TRACKS, 0, NUM_SCENES, true);\n    for (int i = 0; i &lt; NUM_TRACKS; i++) {\n      final int track_id = i;\n      Track     track    = trackBank.getItemAt(i);\n      track.arm().markInterested();\n      track.name().markInterested();\n      track.color().markInterested();\n      track.isActivated().markInterested();\n      track.isGroup().markInterested();\n      track.isGroupExpanded().markInterested();\n\n      track_devices.add(new SuperBankDevices(track));\n\n      //Always Select track when selecting a slot.\n      track.clipLauncherSlotBank().addIsSelectedObserver((slot_index, b) -&gt; slotBankIsSelectedUpdate(track_id, slot_index, b));\n    }\n\n    cursor_track_equals_values = new HashMap&lt;CursorTrack, ArrayList&lt;BooleanValue&gt;&gt;();\n    Signal fold = host.getDocumentState().getSignalSetting(\"Collapse\", \"Super Bank\", \"Collapse Super Bank\");\n    fold.addSignalObserver(() -&gt; expandTracks(false));\n    Signal unfold = host.getDocumentState().getSignalSetting(\"Expand\", \"Super Bank\", \"Expand Super Bank\");\n    unfold.addSignalObserver(() -&gt; expandTracks(true));\n  }\n\n\n  private void slotBankIsSelectedUpdate(int track_id, int slot_index, boolean b) {\n    //select a track when you select a slot.\n    if (b) {\n      Track            channel = trackBank.getItemAt(track_id);\n      ClipLauncherSlot d       = channel.clipLauncherSlotBank().getItemAt(slot_index);\n      channel.selectInEditor();\n    }\n  }\n\n  private void isSelectedUpdate(int track_id, boolean b) {\n    host.println(\"selected: \" + track_id + \" : \" + b);\n  }\n\n  public void createEqualsValues(CursorTrack cursor_track) {\n    ArrayList&lt;BooleanValue&gt; equals_values = new ArrayList&lt;&gt;();\n    for (int i = 0; i &lt; NUM_TRACKS; i++) {\n      BooleanValue equals_value = trackBank.getItemAt(i).createEqualsValue(cursor_track);\n      equals_value.markInterested();\n      equals_values.add(equals_value);\n    }\n    cursor_track_equals_values.put(cursor_track, equals_values);\n  }\n\n  public TrackBank get() {\n    return trackBank;\n  }\n\n  public List&lt;String&gt; getIndexedTrackNames() {\n    List&lt;String&gt; trackNames = new ArrayList&lt;&gt;();\n    boolean masterHit = false;\n    for (int i = 0; i &lt; NUM_TRACKS; i++) {\n      Track  track = trackBank.getItemAt(i);\n      String name  = track.name().get();\n      if(name == \"Master\") {\n        masterHit = true;\n      }\n      if(masterHit &amp;&amp; name.isEmpty()) {\n        break;\n      }\n      trackNames.add(name);\n    }\n    return trackNames;\n  };\n\n  public int getCursorIndex(CursorTrack cursor_track) {\n    ArrayList&lt;BooleanValue&gt; equals_values = cursor_track_equals_values.get(cursor_track);\n    int                     size          = equals_values.size();\n    for (int i = 0; i &lt; size; i++) {\n      boolean is_equals = equals_values.get(i).get();\n      if (is_equals) {\n        return i;\n      }\n    }\n    return -1;\n  }\n\n  public Track getItemAt(int i) {\n    return trackBank.getItemAt(i);\n  }\n\n  public boolean cursorHasDrumPads(CursorTrack cursor_track) {\n    int index = getCursorIndex(cursor_track);\n    return track_devices.get(index).hasDrumPads();\n  }\n\n  public ArrayList&lt;Integer&gt; getCursorDrumPads(CursorTrack cursor_track) {\n    int index = getCursorIndex(cursor_track);\n    if (index != -1) {\n      return track_devices.get(index).getDrumPadNotes();\n    } else {\n      return new ArrayList&lt;&gt;();\n    }\n  }\n\n  public ArrayList&lt;Device&gt; getCursorTrackDevices(CursorTrack cursor_track) {\n    int index = getCursorIndex(cursor_track);\n    if (index != -1) {\n      return track_devices.get(index).getDevices();\n    } else {\n      return new ArrayList&lt;&gt;();\n    }\n  }\n\n  /**\n   * Sets expansion of all groups in bank until they are all set to target.\n   *\n   * */\n  public void expandTracks(boolean expanded) {\n    List&lt;Track&gt; tracks = new ArrayList&lt;&gt;();\n    for (int i = 0; i &lt; NUM_TRACKS; i++) {\n      Track track = trackBank.getItemAt(i);\n      if (trackBank.getItemAt(i).isGroup().get()) {\n        if(  track.isGroupExpanded().get() !=  expanded) {\n          track.isGroupExpanded().set(expanded);\n          host.scheduleTask(()-&gt;expandTracks(expanded), 50);\n          return;\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"notes/bitwig-extensions/code-example/","title":"Code example","text":""},{"location":"notes/bitwig-extensions/code-example/#bitwig-extensions-code","title":"Bitwig Extensions Code","text":"<p>Still working on the Open Woods Project. For now check out the bitwig library of extensions. https://github.com/bitwig/bitwig-extensions</p> <pre><code>public class SuperBank {\n\n\n  private final HashMap&lt;CursorTrack, ArrayList&lt;BooleanValue&gt;&gt; cursor_track_equals_values;\n  private final ArrayList&lt;SuperBankDevices&gt; track_devices;\n  int NUM_TRACKS = 96;\n  int NUM_SCENES = 64;\n\n  TrackBank trackBank;\n\n\n  private ControllerHost host;\n\n  public SuperBank(ControllerHost host) {\n    this.host = host;\n</code></pre>"},{"location":"notes/touch-osc/","title":"Touch OSC","text":"<p> Touch OSC MKII is the next evolution of Touch Based Controllers that works on multiple platforms with touch support. Since Lemur pretty much died in a dumpster fire of years of not being supported, Hexler came through with a great replacement that supports Lua Scripting! </p>"},{"location":"notes/touch-osc/#touch-osc-hexlernet","title":"Touch OSC @ Hexler.net","text":"<p>Find more information about Touch OSC</p>"},{"location":"notes/touch-osc/#things-you-can-do-with-touch-osc","title":"Things you can do with touch OSC","text":"<ul> <li>Build a Touch Interface with Midi Controller Integration</li> <li>Emulate another midi controller</li> <li>Make a game! Yes, its that powerful with the addition of Lua Scripting.</li> <li>Control or read from any OSC Enabled device</li> </ul> <p>I hope to elaborate on this page more. I want to provide snippets and a bunch of resources that will be useful for the to the Touch OSC community. For now check out some of my submissions to Patch Storage</p>"},{"location":"notes/touch-osc/#other-resources","title":"Other Resources","text":"<p>Felix and friends have made this incredible resource for learning Lua &amp; Local Messages in Touch OSC. https://github.com/F-l-i-x/TouchOSC</p> <p>Discord Server Generally while I'm working on Touch OSC Projects, I'll also hang out with crew and help answer questions in the Touch OSC Discord. Join in the fun. Remember to use <code>#threads!</code> https://discord.gg/t5u6NvcSxB</p>"},{"location":"notes/touch-osc/cheatsheet/","title":"Cheat Sheet","text":"","tags":["touchosc"]},{"location":"notes/touch-osc/cheatsheet/#why-make-this","title":"Why make this?","text":"<p>In my quest to master Touch OSC MKII, I've ventured deep into the labyrinth of its manual and formatted the information in a different way. Not only does creating this guide serve as a deep dive into learning the intricacies of Touch OSC, but it also became an essential tool in my arsenal, especially since my forays into editing Touch OSC templates aren't a daily ritual.</p> <p>The journey into the world of Touch OSC is ongoing, and I\u2019m excited to share the insights and tricks I've gathered along the way. Lua everywhere! </p>","tags":["touchosc"]},{"location":"notes/touch-osc/cheatsheet/#reference","title":"Reference","text":"<ul> <li>Touch OSC Enumerations</li> </ul>","tags":["touchosc"]},{"location":"notes/touch-osc/cheatsheet/#snippets","title":"Snippets","text":"<ul> <li>My personal library of useful Lua Snippets.</li> </ul>","tags":["touchosc"]},{"location":"notes/touch-osc/cheatsheet/#per-frame-updates","title":"Per Frame Updates","text":"Update Callback<pre><code>function update()\n  print(self.name, 'update') \nend\n</code></pre>","tags":["touchosc"]},{"location":"notes/touch-osc/cheatsheet/#values","title":"Values","text":"","tags":["touchosc"]},{"location":"notes/touch-osc/cheatsheet/#value-changed","title":"Value Changed","text":"Value - AllValue - Is TouchedValue X and Touch ActiveValue - Debug <pre><code>function onValueChanged(key)\n  if (key == \"x\") then\n\n  end\n  if (key == \"touch\") then\n\n  end\n  if (key == \"x\" and self.values.touch) then\n\n  end\nend\n</code></pre> <pre><code>function onValueChanged(key)\n  if key == \"touch\" and self.values.touch then\n\n  end\nend\n</code></pre> <pre><code>function onValueChanged(key)\n  if key == \"x\" and self.values.touch then\n\n  end\nend\n</code></pre> <pre><code>function onValueChanged(key)\n  print(key, self.values[key])\nend\n</code></pre>","tags":["touchosc"]},{"location":"notes/touch-osc/cheatsheet/#set-value","title":"Set Value","text":"Set Value <pre><code>self.parent.values.x = 1\n</code></pre>","tags":["touchosc"]},{"location":"notes/touch-osc/cheatsheet/#notify","title":"Notify","text":"","tags":["touchosc"]},{"location":"notes/touch-osc/cheatsheet/#notify-receive","title":"Notify Receive","text":"NotifyNotify - Debug <pre><code>function onReceiveNotify(key, value)\n  if key == \"\" then\n\n  end\nend\n</code></pre> <pre><code>function onReceiveNotify(key, value)\n  print(self.name, 'onReceiveNotify')\n  print('\\t key   =', key)\n  print('\\t value =', value)\nend\n</code></pre>","tags":["touchosc"]},{"location":"notes/touch-osc/cheatsheet/#notify-send","title":"Notify Send","text":"Notify SendNotify Send - Table <pre><code>self.parent:notify(\"update\", 1)\n</code></pre> <pre><code>self.parent:notify(\"update\", {obj=self, value=1})\n</code></pre>","tags":["touchosc"]},{"location":"notes/touch-osc/cheatsheet/#osc","title":"OSC","text":"","tags":["touchosc"]},{"location":"notes/touch-osc/cheatsheet/#osc-receive","title":"OSC Receive","text":"OSC Receive - SimpleOSC Receive - All ValuesOSC Receive - Debug OSC Callback - Single Value<pre><code>function onReceiveOSC(message, connections)\n  local path = message[1]\n  local arguments = message[2]\n  if path==\"/\" then\n    local v = arguments[1].value\n\n  end\nend\n</code></pre> OSC Callback - Loop Values<pre><code>function onReceiveOSC(message, connections)\n  local path = message[1]\n  local arguments = message[2]\n  if path==\"/\" then\n    for i=1,#arguments do\n      local tag = arguments[i].tag\n      local v = arguments[i].value\n    end\n  end\nend\n</code></pre> <pre><code>function onReceiveOSC(message, connections)\n  print(self.name, 'onReceiveOSC')\n  local path = message[1]\n  local arguments = message[2]\n  print('\\t path        =', path)\n  for i=1,#arguments do\n    print('\\t argument    =', arguments[i].tag, arguments[i].value)\n  end\n  print('\\t connections =', table.unpack(connections))\nend\n</code></pre>","tags":["touchosc"]},{"location":"notes/touch-osc/cheatsheet/#osc-send","title":"OSC Send","text":"Osc Send - SimpleOsc Send - Complex Simple Message<pre><code>-- -----------------------------------------\n-- Send simple OSC messages\n--\n-- arguments are auto-converted to\n-- boolean, float or string (not integer!)\n-- -----------------------------------------\n\n-- send on all configured connections (1-5)\nsendOSC('/simple')\nsendOSC('/ping', 'pong')\nsendOSC('/on', true)\nsendOSC('/1/fader1', 0.5)\nsendOSC('/3/xy1', 0.25, 0.75)\nsendOSC('/mixedarguments', 'Hello', 1, true, 'World')\n\n-- send only on connections 1 and 2\nsendOSC('/1/fader1', 0.5, { true, true })\n\n-- send only on connections 1 and 3\nsendOSC('/3/xy1', 0.25, 0.75, { true, false, true })\n\n-- send only on connections 1 and 5\nsendOSC('/mixedarguments', 'Hello', 1, true, 'World', { true, false, false, false, true })\n</code></pre> Complex Message<pre><code>-- -----------------------------------------\n-- Send complex OSC messages\n-- with argument type tags\n-- -----------------------------------------\n\nsendOSC(\n  -- message\n  {\n    -- path\n    '/complex',\n\n    -- argument list\n    {\n      { tag = 'T' },                                     -- true\n      { tag = 'F' },                                     -- false\n      { tag = 'N' },                                     -- nil\n      { tag = 'I' },                                     -- infinitum\n      { tag = 'i', value = 42 },                         -- int32\n      { tag = 'f', value = 3.14 },                       -- float32\n      { tag = 's', value = 'Goodbye Cruel World' },      -- string\n      { tag = 'b', value = { 0xC0, 0x00, 0x10, 0xFF } }  -- blob\n    }\n  },\n  -- connections\n  {\n    true, -- 1\n    true, -- 2\n    true, -- 3\n    true, -- 4\n    true  -- 5\n  }\n)\n</code></pre>","tags":["touchosc"]},{"location":"notes/touch-osc/cheatsheet/#midi","title":"Midi","text":"","tags":["touchosc"]},{"location":"notes/touch-osc/cheatsheet/#midi-receive","title":"Midi Receive","text":"MIDI Callback<pre><code>function onReceiveMIDI(message, connections)\n  print(self.name, 'onReceiveMIDI')\n  print('\\t message     =', table.unpack(message))\n  print('\\t connections =', table.unpack(connections))\nend\n</code></pre>","tags":["touchosc"]},{"location":"notes/touch-osc/cheatsheet/#midi-send","title":"Midi Send","text":"Sending Midi<pre><code>-- control change, controller 0, channel 1\n-- all configured connections (1-5)\nsendMIDI({ 176, 0, 102 })\nsendMIDI({ MIDIMessageType.CONTROLCHANGE, 0, 102 })\n\n-- control change, controller 0, channel 2\n-- all configured connections (1-5)\nsendMIDI({ 177, 0, 103 })\nsendMIDI({ MIDIMessageType.CONTROLCHANGE + 1, 0, 103 })\n\n-- control change, controller 2, channel 6\n-- all configured connections (1-5)\nsendMIDI({ 181, 2, 104 })\nsendMIDI({ MIDIMessageType.CONTROLCHANGE + 5, 2, 104 })\n\n-- send only on connections 1 and 2\nsendMIDI({ MIDIMessageType.NOTE_ON, 12, 88 }, { true, true })\nsendMIDI({ MIDIMessageType.NOTE_OFF, 12, 0 }, { true, true })\n\n-- send only on connections 1 and 3\nsendMIDI({ MIDIMessageType.NOTE_ON, 13, 88 }, { true, false, true })\nsendMIDI({ MIDIMessageType.NOTE_OFF, 13, 0 }, { true, false, true })\n\n-- send only on connections 1 and 5\nsendMIDI({ MIDIMessageType.NOTE_ON, 14, 88 }, { true, false, false, false, true })\nsendMIDI({ MIDIMessageType.NOTE_OFF, 14, 0 }, { true, false, false, false, true })\n\n-- send system exlusive\nsendMIDI({ 0xF0, 0x00, 0x01, 0xF7 })\nsendMIDI({ MIDIMessageType.SYSTEMEXCLUSIVE, 0x00, 0x0D, 0xF7 })\n</code></pre>","tags":["touchosc"]},{"location":"notes/touch-osc/cheatsheet/#color","title":"Color","text":"<pre><code>color.r\ncolor.g\ncolor.b\ncolor.a \n\nColor()                               -- [1]\nColor(color)                          -- [2]\nColor(number)                         -- [3]\nColor(number, number)                 -- [4]\nColor(number, number, number)         -- [5]\nColor(number, number, number, number) -- [6]\n\nColor.toHexString(color)\nColor.fromHexString(string)\n\n-- multiplication\ncolor * color\ncolor * number\n\n-- division\ncolor / color\ncolor / number\n\n-- addition\ncolor + color\ncolor + number\n\n-- subtraction\ncolor - color\ncolor - number\n</code></pre>","tags":["touchosc"]},{"location":"notes/touch-osc/cheatsheet/#functions","title":"Functions","text":"<pre><code>rectangle:contains(number, number)\n</code></pre>","tags":["touchosc"]},{"location":"notes/touch-osc/controls/","title":"Controls","text":"<p>This document sourced and reformatted from Hexlers Touch OSC MKII Manual.</p>","tags":["touchosc"]},{"location":"notes/touch-osc/controls/#fields","title":"Fields","text":"control.ID <pre><code>local myID = self.ID\nlocal parentID = self.parent.ID\nprint(myID == parentID)\n&gt; false\n</code></pre> <p>A unique ID string, generated when the control is created. It remains unchanged over a control's lifetime, during document load/save and during editor network transmission.</p> control.type <pre><code>local myType = self.type\nprint(myType == ControlType.BUTTON)\n&gt; true\n</code></pre> <p>Control type numeric constant, one of the ControlType enumeration values.</p> control.index <pre><code>local myIndex = self.index\nlocal parentIndex = self.parent.index\n</code></pre> <p>The control's position in its parent list of child controls,\u00a0<code>1 to n</code>\u00a0for regular controls,\u00a0<code>0</code>\u00a0for the document root.</p> control.parent <pre><code>local myParentControl = self.parent\nlocal noParentControl = root.parent -- will be nil, root has no parent\n</code></pre> <p>A reference to the control's parent\u00a0<code>Control</code>\u00a0object, or\u00a0<code>nil</code>\u00a0for the document root.</p> control.children <pre><code>self.children.button1.visible = false -- set 'visible' property on child 'button1'\nself.children['button1'].visible = false -- same as the previous line\nlocal firstChild = self.children[1] -- first child control\nlocal secondChild = self.children[2] -- second child control\nprint(#self.children) -- print the number of child controls\n</code></pre> <p>A list of the control's child\u00a0<code>Control</code>\u00a0objects. The list can be indexed by control name (a string) or index (a number). Control names are user assignable and\u00a0not\u00a0unique.</p> Usage Description <code>control.children.name</code> <code>control.children[name]</code> Returns the first child control with name\u00a0<code>name</code>\u00a0or\u00a0<code>nil</code>\u00a0if none is found. Indexing by name is equivalent to calling\u00a0<code>control:findByName(name)</code>. <code>control.children[1 to n]</code> Returns the child control at index\u00a0<code>1 to n</code>\u00a0or\u00a0<code>nil</code>\u00a0if none is found. <code>#control.children</code> Returns the number of child controls. control.properties <pre><code>self.properties.name = 'new_name'\nself.properties['name'] = 'new_name' -- same as the previous line\nself.name = 'new_name' -- same as the previous line\nself.frame.x = 10\nself.color = Color(1,0,0)\nself.color.r = 0\nprint(#self.properties) -- print the number of properties\n</code></pre> <p>A list of the control's properties. The list can be indexed by property name (a string) or index (a number). Property names are unique.</p> Usage Description <code>control.properties.name</code> <code>control.properties[name]</code> Returns the current value of the property with name\u00a0<code>name</code>\u00a0or\u00a0<code>nil</code>\u00a0if none is found. <code>control.properties[1 to n]</code> Returns the current value of the property at index\u00a0<code>1 to n</code>\u00a0or\u00a0<code>nil</code>\u00a0if none is found.Since version 1.2.6.185 the list is always ordered alphabetically by property name. Earlier versions do not guarantee any particular order. <code>control.properties.keys</code> Returns a list of all property names for the control in alphabetical order. <code>#control.properties</code> Returns the number of properties in the list. <p>NOTE\u00a0For convenience, indexing a control reference directly using\u00a0<code>control.name</code>\u00a0or\u00a0<code>control[name]</code>, where name is not one of the field or function names listed here, will implicitly index the control's property list with\u00a0<code>control.properties[name]</code>.</p> <p>Therefore\u00a0<code>control.color</code>\u00a0and\u00a0<code>control.properties.color</code>\u00a0will refer to the same property value.</p> <p>See\u00a0Control Properties and Values\u00a0for a list of possible properties for each control type.</p> control.values <pre><code>self.values.x = 1\nself.values['x'] = 1 -- same as the previous line\nprint(#self.values) -- print the number of values\n</code></pre> <p>A list of the control's values. The list can be indexed by value name (a string) or index (a number). Value names are unique.</p> Usage Description <code>control.values.name</code> <code>control.values[name]</code> Returns the current value of the control value with name\u00a0<code>name</code>\u00a0or\u00a0<code>nil</code>\u00a0if none is found. <code>control.values[1 to n]</code> Returns the current value of the value at index\u00a0<code>1 to n</code>\u00a0or\u00a0<code>nil</code>\u00a0if none is found.Since version 1.2.6.185 the list is always ordered alphabetically by value name, with the value named\u00a0<code>touch</code>\u00a0always at the end of the list. Earlier versions do not guarantee any particular order. <code>control.values.keys</code> Returns a list of all value names for the control in alphabetical order with the value name\u00a0<code>touch</code>\u00a0always at the end of the list. <code>#control.values</code> Returns the number of values in the list. <p>See\u00a0Control Properties and Values\u00a0for a list of possible properties for each control type.</p> control.messages <pre><code>local midiMessages = self.messages.MIDI -- same as: self.messages[1]\nlocal oscMessages = self.messages.OSC -- same as: self.messages[2]\nlocal localMessages = self.messages.LOCAL -- same as: self.messages[3]\nlocal gamepadMessages = self.messages.GAMEPAD -- same: as self.messages[4]\nprint(#self.messages)\n&gt; 4\n</code></pre> <p>since 1.2.6.185</p> <p>A list of the control's messages, containing separate lists for each message type. The list can be indexed by</p> <ul> <li>message type name (a string):\u00a0<code>MIDI, OSC, LOCAL, GAMEPAD</code></li> <li>index (a number):\u00a0<code>1 - 4</code></li> </ul> <p>The messages in each of the lists will be in the same order as they are displayed in the editor UI.</p> <p>See\u00a0Script \u00b7 Objects \u00b7 Messages\u00a0for a description of the four message object types.</p> control.pointers <pre><code>local pointer = self.pointers[1]\nprint(pointer.ID,\n    pointer.x, pointer.y,\n    pointer.state,\n    pointer.created, pointer.modified)\n&gt; 0 33.285 20.393 1 1836924.838 1836914.867\n</code></pre> <p>A list containing one table for each pointer currently associated with the control during the current frame with the following table keys per pointer:</p> Key Description <code>ID</code> The numeric ID of the pointer. Constant during the pointers' lifetime. <code>x</code> The x position of the pointer. <code>y</code> The y position of the pointer. <code>state</code> The current state of the pointer, one of the possible values of the\u00a0<code>PointerState</code>\u00a0enumeration. <code>created</code> The time the pointer event began, in milliseconds as returned by the\u00a0<code>getMillis</code>\u00a0global function. <code>modified</code> The time of the last modification of this pointer, in milliseconds as returned by the\u00a0<code>getMillis</code>\u00a0global function. <p>Each pointer progresses through the states in the\u00a0<code>PointerState</code>\u00a0enumeration during its lifetime:</p> <ul> <li>After being created the pointer will be in state\u00a0<code>PointerState.BEGIN</code>\u00a0for one frame.</li> <li>During its lifetime the pointer will be either in state\u00a0<code>PointerState.ACTIVE</code>\u00a0or\u00a0<code>PointerState.MOVE</code>\u00a0depending on whether the pointer's position has changed since the last frame.</li> <li>When the pointer event ends it will be in state\u00a0<code>PointerState.END</code>\u00a0for one frame and will then be removed from the list of pointers.</li> </ul> <p>See\u00a0Snippets\u00a0for more pointer example use.</p>","tags":["touchosc"]},{"location":"notes/touch-osc/controls/#functions","title":"Functions","text":"getValueField(string, field) <pre><code>self:getValueField('x', ValueField.CURRENT) -- same as: self.values.x\nself:getValueField('x', ValueField.DEFAULT)\n</code></pre> <p>Returns a value field of the control value with name\u00a0<code>string</code>, or\u00a0<code>nil</code>\u00a0if none is found.</p> <p>The parameter\u00a0<code>field</code>\u00a0can be one of the possible values of the\u00a0<code>ValueField</code>\u00a0enumeration and determines which value is returned:</p> <ul> <li><code>ValueField.CURRENT</code>\u00a0- Returns the current value.</li> <li><code>ValueField.LAST</code>\u00a0- Returns the value before the last change.</li> <li><code>ValueField.DEFAULT</code>\u00a0- Returns the default value.</li> </ul> <p>Invoking the function with\u00a0<code>field</code>\u00a0parameter\u00a0<code>ValueField.CURRENT</code>\u00a0is equivalent to referencing\u00a0<code>control.values[string]</code>.</p> <p>See\u00a0Control Properties and Values\u00a0for a list of possible values for each control type.</p> setValueField(string, field, value) <pre><code>self:setValueField('x', ValueField.CURRENT, 1.0) -- same as: self.values.x = 1.0\nself:setValueField('x', ValueField.DEFAULT, 0.5)\n</code></pre> <p>since 1.0.5.109</p> <p>Set a value field of the control value with name\u00a0<code>string</code>.</p> <p>The parameter\u00a0<code>field</code>\u00a0can be one of the following values of the\u00a0<code>ValueField</code>\u00a0enumeration, and determines which value field will be set:</p> <ul> <li><code>ValueField.CURRENT</code>\u00a0- Set the current value.</li> <li><code>ValueField.DEFAULT</code>\u00a0- Set the default value.</li> </ul> <p>Invoking the function with\u00a0<code>field</code>\u00a0parameter\u00a0<code>ValueField.CURRENT</code>\u00a0is equivalent to calling\u00a0<code>control.values[string] = value</code>.</p> getValueProperty() <pre><code>local valueLocked = self:getValueProperty('x', ValueProperty.LOCKED)\nlocal valueType = self:getValueProperty('x', ValueProperty.TYPE)\nprint(valueType == ValueType.FLOAT)\n&gt; true\n</code></pre> <p>Returns the value of the property\u00a0<code>property</code>\u00a0of the control value with name\u00a0<code>string</code>, or\u00a0<code>nil</code>\u00a0if none is found.</p> <p>The parameter\u00a0<code>property</code>\u00a0can be one of the possible values of the\u00a0<code>ValueProperty</code>\u00a0enumeration and determines which property value is returned:</p> <ul> <li><code>ValueProperty.TYPE</code>\u00a0- The type of the value, one of the possible values of the\u00a0<code>ValueType</code>\u00a0enumeration</li> <li><code>ValueProperty.LOCKED</code>\u00a0- Locked state of the value, a boolean value</li> <li><code>ValueProperty.LOCKED_DEFAULT_CURRENT</code>\u00a0- Default and current value locked state, a boolean value</li> <li><code>ValueProperty.DEFAULT_PULL</code>\u00a0- Default pull of the value, an integer value ranging from\u00a0<code>0</code>\u00a0to\u00a0<code>100</code></li> </ul> <p>See\u00a0Control Properties and Values\u00a0for a list of possible values for each control type.</p> setValueProperty(string, property, value) <pre><code>self:setValueProperty('x', ValueProperty.LOCKED, false)\nself:setValueProperty('x', ValueProperty.DEFAULT_PULL, 50)\n</code></pre> <p>Set the value of the property\u00a0<code>property</code>\u00a0of the control value with name\u00a0<code>string</code>.</p> <p>The parameter\u00a0<code>property</code>\u00a0can be one of the possible values of the\u00a0<code>ValueProperty</code>\u00a0enumeration with the exception of\u00a0<code>ValueProperty.TYPE</code>\u00a0and determines which property value is set.</p> <p>See the\u00a0<code>getValueProperty</code>\u00a0function above for a description of the possible value properties.</p> <p>See\u00a0Control Properties and Values\u00a0for a list of possible values for each control type.</p> notify(string [, value]) <pre><code>function notify(string [, value])\n\n-- example\nself.parent:notify('hello parent')\nself.children.button1:notify('hello child', self.name)\nself.children.button2:notify('hello child', 1.5)\n</code></pre> <p>Invokes the\u00a0<code>onReceiveNotify</code>\u00a0callback function on another control.</p> <p>The parameter\u00a0<code>string</code>\u00a0and an optional parameter\u00a0<code>value</code>\u00a0will be copied to the receiving control's Lua context and passed to the\u00a0<code>onReceiveNotify</code>\u00a0callback function, only if that callback function is defined in the receiving control's script. Calling the function on\u00a0<code>self</code>\u00a0has no effect.</p> <p>The optional parameter\u00a0<code>value</code>\u00a0can be of type\u00a0<code>boolean</code>,\u00a0<code>number</code>,\u00a0<code>string</code>,\u00a0<code>table</code>\u00a0or any of TouchOSC's\u00a0object types.</p> <p>Please note that because the parameter values have to be copied between Lua execution contexts and because this introduces overhead, it is advisable not to invoke the\u00a0<code>notify</code>\u00a0function from inside the\u00a0<code>update</code>\u00a0function every frame.</p> findByID(string [, boolean]) <pre><code>function findByID(string [, boolean])\n\n-- example\nlocal buttonID = self.children.button1.ID\nlocal childButton = self:findByID(buttonID)\n</code></pre> <p>Returns the child\u00a0<code>Control</code>\u00a0object with ID\u00a0<code>string</code>\u00a0or\u00a0<code>nil</code>\u00a0if none is found. The optional\u00a0<code>boolean</code>\u00a0parameter determines if the search will be recursive and descend the child control hierarchy, defaults to\u00a0<code>false</code>.</p> findByType(controltype [, boolean]) <pre><code>function findByType(controltype [, boolean])\n\n\n-- example\nlocal firstChildButton = self:findByType(ControlType.BUTTON)\nlocal firstChildFader = self:findByType(ControlType.FADER)\n</code></pre> <p>since 1.0.2.98</p> <p>Returns the first child\u00a0<code>Control</code>\u00a0object whose type matches\u00a0<code>controltype</code>\u00a0or\u00a0<code>nil</code>\u00a0if none is found. The\u00a0<code>controltype</code>\u00a0parameter can be any of the\u00a0ControlType\u00a0enumeration values. The optional\u00a0<code>boolean</code>\u00a0parameter determines if the search will be recursive and descend the child control hierarchy, defaults to\u00a0<code>false</code>.</p> findAllByType(controltype [, boolean]) <pre><code>function findAllByType(controltype [, boolean])\n\n\n-- example\nlocal allChildButtons = self:findAllByType(ControlType.BUTTON)\nlocal allChildFaders = self:findAllByType(ControlType.FADER)\n</code></pre> <p>since 1.0.2.98</p> <p>Returns a list of child\u00a0<code>Control</code>\u00a0objects whose types match\u00a0<code>controltype</code>\u00a0or an empty list if none are found. The\u00a0<code>controltype</code>\u00a0parameter can be any of the\u00a0ControlType\u00a0enumeration values. The optional\u00a0<code>boolean</code>\u00a0parameter determines if the search will be recursive and descend the child control hierarchy, defaults to\u00a0<code>false</code>.</p> findByProperty(string, value [, boolean]) <pre><code>local firstRedControl = self:findByProperty('color', Color(1,0,0))\nlocal firstHiddenControl = self:findByProperty('visible', false)\n</code></pre> <p>since 1.0.2.98</p> <p>Returns the first child\u00a0<code>Control</code>\u00a0object whose current value of the property named\u00a0<code>string</code>\u00a0matches the provided\u00a0<code>value</code>\u00a0or\u00a0<code>nil</code>\u00a0if none is found. The optional\u00a0<code>boolean</code>\u00a0parameter determines if the search will be recursive and descend the child control hierarchy, defaults to\u00a0<code>false</code>.</p> findAllByProperty(string, value [, boolean]) <pre><code>local allRedControls = self:findAllByProperty('color', Color(1,0,0))\nlocal allHiddenControls = self:findAllByProperty('visible', false)\n</code></pre> <p>since 1.0.2.98</p> <p>Returns a list of child\u00a0<code>Control</code>\u00a0objects whose current values of the property named\u00a0<code>string</code>\u00a0matches the provided\u00a0<code>value</code>\u00a0or an empty list if none are found. The optional\u00a0<code>boolean</code>\u00a0parameter determines if the search will be recursive and descend the child control hierarchy, defaults to\u00a0<code>false</code>.</p> findByName(string [, boolean]) <pre><code>local childButton1 = self:findByName('button1') -- same as: self.children.button1\nlocal childFader1 = self:findByName('fader1') -- same as: self.children.fader1\n</code></pre> <p>Equivalent to calling\u00a0<code>findByProperty('name', string [, boolean])</code>.</p> findAllByName(string [, boolean]) <pre><code>local allChildrenNamedA = self:findAllByName('A')\n</code></pre> <p>Equivalent to calling\u00a0<code>findAllByProperty('name', string [, boolean])</code>.</p>","tags":["touchosc"]},{"location":"notes/touch-osc/controls/#callback-functions","title":"Callback Functions","text":"init() <pre><code>function init()\n  print(\"init\")\nend\n</code></pre> <p>since 1.0.8.122</p> <p>Called once when the application transitions from editing mode to control surface mode.</p> <p>Note\u00a0that this function might be called again under certain conditions:</p> <ul> <li>When the application comes back to the foreground after being suspended on a mobile device</li> <li>When the application is running as\u00a0editor network\u00a0client and receives updates from the server that significantly change the structure of the local document</li> </ul> update() <pre><code>function update()\n  print(\"Elapsed ms:\", getMillis())\nend\n</code></pre> <p>Called once per application frame\u00a0after\u00a0all processing of user input and received messages has completed.</p> onValueChanged(string) <pre><code>function onValueChanged(valueName)\n  print(\"Value of \", valueName, \"has changed to\", self.values[valueName])\nend\n</code></pre> <p>Called\u00a0after\u00a0any of the control's values have changed, once for each changed value, and\u00a0before\u00a0any further processing as a result of the change.</p> <p>The parameter\u00a0<code>string</code>\u00a0is the name of the value that has changed. It is valid to set the changed value again from inside the callback, but note that the callback will\u00a0not\u00a0be invoked again as a result.</p> <p>Returning\u00a0<code>true</code>\u00a0from this callback will end any further processing TouchOSC would normally do as a result of the change (ie sending of messages).</p> onPointer(table) <pre><code>function onPointer(pointers)\n  print('onPointer')\n  for i=1,#pointers do\n    local pointer = pointers[i]\n    print('\\t', pointer.ID,\n          pointer.x, pointer.y,\n          pointer.state,\n          pointer.created, pointer.modified)\n  end\nend\n</code></pre> <p>Called\u00a0after\u00a0processing of user input is complete and all active pointers (mouse cursor or touch input) have been mapped and assigned to any controls, and\u00a0before\u00a0any further processing of the pointer state and internal control behavior in response to the pointer input is evaluated.</p> <p>Will only be invoked if there are any pointers associated with the control during the current frame.</p> <p>The\u00a0<code>table</code>\u00a0passed as parameter to the callback contains a list of one or more pointers that have been selected as the\u00a0significant\u00a0event input according to the control's configuration and do not necessarily include\u00a0all\u00a0pointers currently associated with the control.</p> <p>For example, a\u00a0<code>button</code>\u00a0type control will commonly only be interested in a single\u00a0significant\u00a0touch input, which will be selected by the application and passed to the control for processing based on the control's configuration.</p> <p>To access\u00a0all\u00a0pointers currently associated with a control access the\u00a0<code>control.pointers</code>\u00a0field.</p> <p>Returning\u00a0<code>true</code>\u00a0from this callback will end any further processing TouchOSC would normally do for the current control as a result of the input (ie changing a control's values).</p> <p>For a description of the pointer table format and pointer states see the\u00a0<code>control.pointers</code>\u00a0field.</p> onReceiveMIDI(message, connections) <pre><code>function onReceiveMIDI(message, connections)\n  print('onReceiveMIDI')\n  print('\\t message     =', table.unpack(message))\n  print('\\t connections =', table.unpack(connections))\nend\n</code></pre> <p>Called\u00a0after\u00a0receiving a MIDI message and determining that the control should be a receiver of the message according to the routing table, and\u00a0before\u00a0any further evaluation or processing of potential changes to a control's values or properties.</p> <p>Returning\u00a0<code>true</code>\u00a0from this callback will end any further processing TouchOSC would normally do for the current control as a result of receiving the message (ie changing a control's values or properties).</p> <p>NOTE\u00a0If it is defined, the document root's\u00a0<code>onReceiveMIDI</code>\u00a0callback function will always be invoked first, and if\u00a0<code>true</code>\u00a0is returned from that callback, processing of the message will end, it will not be passed along to any other controls in the routing table and no further callbacks will be invoked.</p> <p>For the format of the\u00a0<code>message</code>\u00a0and\u00a0<code>connections</code>\u00a0parameters see the\u00a0sendMIDI\u00a0function.</p> function onReceiveOSC(message, connections) <pre><code>function onReceiveOSC(message, connections)\n  print('onReceiveOSC')\n  local path = message[1]\n  local arguments = message[2]\n  print('\\t path        =', path)\n  for i=1,#arguments do\n    print('\\t argument    =', arguments[i].tag, arguments[i].value)\n  end\n  print('\\t connections =', table.unpack(connections))\nend\n</code></pre> <p>Called\u00a0after\u00a0receiving an OSC message and determining that the control should be a receiver of the message according to the routing table, and\u00a0before\u00a0any further evaluation or processing of potential changes to a control's values or properties.</p> <p>Returning\u00a0<code>true</code>\u00a0from this callback will end any further processing TouchOSC would normally do for the current control as a result of receiving the message (ie changing a control's values or properties).</p> <p>NOTE\u00a0If it is defined, the document root's\u00a0<code>onReceiveOSC</code>\u00a0callback function will always be invoked first, and if\u00a0<code>true</code>\u00a0is returned from that callback, processing of the message will end, it will not be passed along to any other controls in the routing table and no further callbacks will be invoked.</p> <p>For the format of the\u00a0<code>message</code>\u00a0and\u00a0<code>connections</code>\u00a0parameters see the\u00a0sendOSC\u00a0function for complex messages.</p> onReceiveGamepad(input, value, connections) <pre><code>-- example\nfunction onReceiveGamepad(input, value, connections)\n  print('onReceiveGamepad')\n  print('\\t input       =', input) -- one of the GamepadInput enumeration values\n  print('\\t value       =', value)\n  print('\\t connections =', table.unpack(connections))\nend\n</code></pre> <p>since 1.1.0.132</p> <p>Called\u00a0after\u00a0receiving input from a connected game controller and determining that the control should be a receiver of the input according to the routing table, and\u00a0before\u00a0any further evaluation or processing of potential changes to a control's values or properties.</p> <p>Returning\u00a0<code>true</code>\u00a0from this callback will end any further processing TouchOSC would normally do for the current control as a result of receiving the input (ie changing a control's values or properties).</p> <p>NOTE\u00a0If it is defined, the document root's\u00a0<code>onReceiveGamepad</code>\u00a0callback function will always be invoked first, and if\u00a0<code>true</code>\u00a0is returned from that callback, processing of the message will end, it will not be passed along to any other controls in the routing table and no further callbacks will be invoked.</p> <p>The first parameter\u00a0<code>input</code>\u00a0will be one of the possible values of the\u00a0GamepadInput\u00a0enumeration.</p> <p>The second parameter\u00a0<code>value</code>\u00a0will be the raw, numeric value as received by the game controller.</p> <p>See the\u00a0Control Callback Functions\u00a0sample script for an example of how to handle game controller messages.</p> onReceiveNotify(string [, value]) <pre><code>-- example\nfunction onReceiveNotify(key, value)\n  print('onReceiveNotify')\n  print('\\t key   =', key)\n  print('\\t value =', value)\nend\n</code></pre> <p>Called as a result of the control's\u00a0<code>notify</code>\u00a0function being called by another control.</p> <p>The parameters\u00a0<code>string</code>\u00a0and an optional\u00a0<code>value</code>\u00a0will be copied from the calling control's Lua context to the receiving control's Lua context and passed as parameters to the callback function.</p> <p>Please note that because the parameter values have to be copied between Lua execution contexts and because this introduces overhead, it is advisable not to invoke the\u00a0<code>notify</code>\u00a0function from inside the\u00a0<code>update</code>\u00a0function every frame.</p>","tags":["touchosc"]},{"location":"notes/touch-osc/lua-enumerations/","title":"Touch OSC Enumerations","text":"<p>This document sourced and reformatted from Hexlers Touch OSC MKII Manual.</p>","tags":["touchosc"]},{"location":"notes/touch-osc/lua-enumerations/#enumerations","title":"Enumerations","text":"AlignH <p>Possible values for a\u00a0<code>Control</code>\u00a0object's\u00a0<code>textAlignH</code>\u00a0property.   <pre><code>AlignH.LEFT\nAlignH.CENTER\nAlignH.RIGHT\n</code></pre></p> AlignV <pre><code>AlignV.TOP\nAlignV.MIDDLE\nAlignV.BOTTOM\n</code></pre> ButtonType <p>Possible values for a\u00a0<code>Control</code>\u00a0object's\u00a0<code>buttonType</code>\u00a0property.</p> <pre><code>ButtonType.MOMENTARY\nButtonType.TOGGLE_RELEASE\nButtonType.TOGGLE_PRESS\n</code></pre> ControlType <p>Possible values for a\u00a0<code>Control</code>\u00a0object's\u00a0<code>type</code>\u00a0field.</p> <pre><code>ControlType.BOX\nControlType.BUTTON\nControlType.LABEL\nControlType.TEXT\nControlType.FADER\nControlType.XY\nControlType.RADIAL\nControlType.ENCODER\nControlType.RADAR\nControlType.RADIO\nControlType.GROUP\nControlType.PAGER\nControlType.GRID\n</code></pre> CursorDisplay <pre><code>CursorDisplay.ALWAYS\nCursorDisplay.ACTIVE\nCursorDisplay.INACTIVE\n</code></pre> Font <p>since 1.0.4.106   Possible values for a\u00a0<code>Control</code>\u00a0object's\u00a0<code>font</code>\u00a0property.</p> <pre><code>Font.DEFAULT\nFont.MONOSPACED\n</code></pre> GamepadInput <p>since 1.1.0.132</p> <pre><code>GamepadInput.STICK_LEFT_X\nGamepadInput.STICK_LEFT_Y\nGamepadInput.STICK_RIGHT_X\nGamepadInput.STICK_RIGHT_Y\nGamepadInput.TRIGGER_LEFT\nGamepadInput.TRIGGER_RIGHT\nGamepadInput.BUTTON_UP\nGamepadInput.BUTTON_DOWN\nGamepadInput.BUTTON_LEFT\nGamepadInput.BUTTON_RIGHT\nGamepadInput.BUTTON_A\nGamepadInput.BUTTON_B\nGamepadInput.BUTTON_X\nGamepadInput.BUTTON_Y\nGamepadInput.BUTTON_STICK_LEFT\nGamepadInput.BUTTON_STICK_RIGHT\nGamepadInput.BUMPER_LEFT\nGamepadInput.BUMPER_RIGHT\nGamepadInput.BUTTON_START\nGamepadInput.BUTTON_SELECT\nGamepadInput.BUTTON_HOME\n</code></pre> MIDIMessageType <pre><code>MIDIMessageType.code_OFF\nMIDIMessageType.code_ON\nMIDIMessageType.POLYPRESSURE\nMIDIMessageType.CONTROLCHANGE\nMIDIMessageType.PROGRAMCHANGE\nMIDIMessageType.CHANNELPRESSURE\nMIDIMessageType.PITCHBEND\nMIDIMessageType.SYSTEMEXCLUSIVE\nMIDIMessageType.QUARTERFRAME\nMIDIMessageType.SONGPOSITION\nMIDIMessageType.SONGSELECT\nMIDIMessageType.CLOCK\nMIDIMessageType.START\nMIDIMessageType.CONTINUE\nMIDIMessageType.STOP\nMIDIMessageType.ACTIVESENSING\nMIDIMessageType.SYSTEMRESET\n</code></pre> Orientation <p>Possible values for a\u00a0<code>Control</code>\u00a0object's\u00a0<code>orientation</code>\u00a0property.</p> <pre><code>Orientation.NORTH\nOrientation.EAST\nOrientation.SOUTH\nOrientation.WEST\n</code></pre> OutlineStyle <p>Possible values for a\u00a0<code>Control</code>\u00a0object's\u00a0<code>outlineStyle</code>\u00a0property.</p> <pre><code>OutlineStyle.FULL\nOutlineStyle.CORNERS\nOutlineStyle.EDGES\n</code></pre> PointerPriority <pre><code>PointerPriority.OLDEST\nPointerPriority.NEWEST\n</code></pre> PointerState <pre><code>PointerState \nPointerState.BEGIN\nPointerState.ACTIVE\nPointerState.MOVE\nPointerState.END\n</code></pre> RadioType <p>Possible values for a\u00a0<code>Control</code>\u00a0object's\u00a0<code>radioType</code>\u00a0property.</p> <pre><code>RadioType.SELECT\nRadioType.METER\n</code></pre> Response <p>Possible values for a\u00a0<code>Control</code>\u00a0object's\u00a0<code>response</code>\u00a0property.</p> <pre><code>Response.ABSOLUTE\nResponse.RELATIVE\n</code></pre> Shape <p>Possible values for a\u00a0<code>Control</code>\u00a0object's\u00a0<code>shape</code>\u00a0property.</p> <pre><code>Shape.RECTANGLE\nShape.CIRCLE\nShape.TRIANGLE\nShape.DIAMOND\nShape.PENTAGON\nShape.HEXAGON\n</code></pre> ValueField <pre><code>ValueField.CURRENT\nValueField.LAST\nValueField.DEFAULT\n</code></pre> ValueProperty <pre><code>ValueProperty.TYPE\nValueProperty.LOCKED\nValueProperty.LOCKED_DEFAULT_CURRENT\nValueProperty.DEFAULT_PULL\n</code></pre> ValueType <pre><code>ValueType.BOOLEAN\nValueType.INTEGER\nValueType.FLOAT\nValueType.STRING\n</code></pre>","tags":["touchosc"]},{"location":"notes/touch-osc/lua-functions/","title":"Lua Functions","text":"","tags":["touchosc"]},{"location":"notes/touch-osc/lua-functions/#lua-reference-manual","title":"Lua Reference Manual","text":"<p>https://www.lua.org/manual/5.4/</p>","tags":["touchosc"]},{"location":"notes/touch-osc/lua-functions/#base","title":"base","text":"<pre><code>error\nipairs\nnext\npairs\nprint\nselect\ntonumber\ntostring\nunpack\ntype\n</code></pre>","tags":["touchosc"]},{"location":"notes/touch-osc/lua-functions/#table","title":"table","text":"<p>All standard Lua table library functions are available plus the following additions:</p> <pre><code>table.pack(...)\n</code></pre> <p>Returns a new sequential table created from the elements provided.</p> <pre><code>table.unpack(...)\n</code></pre> <p>Same as the Lua base library function <code>unpack</code>.</p>","tags":["touchosc"]},{"location":"notes/touch-osc/lua-functions/#math","title":"math","text":"<p>All standard Lua math library functions are available plus the following additions:</p> <pre><code>math.clamp(number, number, number)\n</code></pre> <p>Returns <code>min(max(x, minVal), maxVal)</code> where <code>x</code> is the first parameter and <code>minVal</code> and <code>maxVal</code> the second and third parameters.</p>","tags":["touchosc"]},{"location":"notes/touch-osc/lua-functions/#string","title":"string","text":"<p>All standard Lua string library functions are available.</p>","tags":["touchosc"]},{"location":"notes/touch-osc/lua-functions/#bit32","title":"bit32","text":"<p>since 1.1.7.154</p> <p>Support for bitwise operations has been backported from Lua 5.2. All functions are available inside the table <code>bit32</code>.</p> <pre><code>Rectangle()                               -- [1]\nRectangle(rectangle)                      -- [2]\nRectangle(number, number)                 -- [3]\nRectangle(number, number, number, number) -- [4]\n</code></pre> <p>Returns a new rectangle with</p> <ol> <li>position and size set to <code>(0,0)</code>.</li> <li>position and size copied from another <code>Rectangle</code> object.</li> <li>position set to (0,0) and size set to the two numbers.</li> <li>position set to the first pair of numbers and size set to the second two numbers.</li> </ol>","tags":["touchosc"]},{"location":"notes/touch-osc/lua-snippets/","title":"Snippets","text":"<p>A collection of my code snippets for Touch OSC.</p>","tags":["touchosc"]},{"location":"notes/touch-osc/lua-snippets/#debugging","title":"Debugging","text":"Debug Frame <pre><code>function debugFrame(obj)\n  print(obj.name .. ' ( ' .. obj.frame.x .. ', ' .. obj.frame.y .. ', ' .. obj.frame.w .. ', ' .. obj.frame.h .. ')')\nend\n</code></pre> Debug Lua Table <pre><code>function debugTableInternal(tableName, table)\n  local s = \"TABLE: \" .. tableName .. \" {\" \n  for k, v in pairs(table) do\n    if(type(v) == \"table\") then\n      local sDeep = debugTable(tostring(k), v)\n      if (sDeep ~= nil) then\n        s = s .. sDeep \n      end\n\n    end\n    s = s .. k .. \": \" .. tostring(v) .. \", \"\n  end\n  s = string.sub(s, 1, -3)\n  s = s .. \"}\"\n  return s\nend\nfunction debugTable(tableName, table)\n  print(debugTableInternal(tableName, table))\nend\n</code></pre>","tags":["touchosc"]},{"location":"notes/touch-osc/lua-snippets/#events","title":"Events","text":"OnReceiveOSC Snippet OSC Callback - Single Value<pre><code>function onReceiveOSC(message, connections)\n  local path = message[1]\n  local arguments = message[2]\n  if path==\"/\" then\n    local v = arguments[1].value\n\n  end\nend\n</code></pre> <p>code \"Snippet 2\"</p> <pre><code>```Lua title=\"OSC Callback - Loop Values\"\nfunction onReceiveOSC(message, connections)\n  local path = message[1]\n  local arguments = message[2]\n  if path==\"/\" then\n    for i=1,#arguments do\n      local tag = arguments[i].tag\n      local v = arguments[i].value\n    end\n  end\nend\n```\n</code></pre> <p>code \"Debug\"</p> <pre><code>```Lua\nfunction onReceiveOSC(message, connections)\n  print(self.name, 'onReceiveOSC')\n  local path = message[1]\n  local arguments = message[2]\n  print('\\t path        =', path)\n  for i=1,#arguments do\n    print('\\t argument    =', arguments[i].tag, arguments[i].value)\n  end\n  print('\\t connections =', table.unpack(connections))\nend\n```\n</code></pre>","tags":["touchosc"]},{"location":"notes/touch-osc/lua-snippets/#math","title":"Math","text":"Map: Remap a value to a different range <pre><code>function map(value, oldMin, oldMax, newMin, newMax)\n  return (((value - oldMin) * (newMax - newMin)) / (oldMax - oldMin)) + newMin\nend\n</code></pre>","tags":["touchosc"]},{"location":"notes/touch-osc/lua-snippets/#tables","title":"Tables","text":"Deep Table Clear <pre><code>function deepClear(t)\n  for k, v in pairs(t) do\n    if type(v) == \"table\" then\n      deepClear(v)\n    end\n    t[k] = nil\n  end\nend\n\n-- Example usage:\nmyTable = {\n  a = {\n    b = {\n      c = \"value\"\n    }\n  },\n  d = \"another value\"\n}\n\ndeepClear(myTable)\n</code></pre>","tags":["touchosc"]},{"location":"notes/touch-osc/lua-snippets/#finding-objects","title":"Finding Objects","text":"All Object Based On Tag <pre><code>local t = self.parent:findAllByProperty('tag', '3/6', true)\nprint(#t)\nfor i=1, #t do\n  print(t[i].name)\n  print(t[i].parent.name)\nend\n</code></pre> Find All Objects Based on Tag With Full Path <pre><code>local objs = root:findAllByProperty(\"tag\", \"3/5\", true)\n-- print all object names and their path to root\nfor i, obj in ipairs(objs) do\n  print(obj.name .. \" \" .. getPathToRoot(obj))\nend\n\nfunction getPathToRoot(obj)\n  local path = obj.name\n  local parent = obj.parent\n  while parent ~= nil do\n    path = parent.name .. \"/\" .. path\n    parent = parent.parent\n  end\n  return path\nend\n</code></pre> Find Objects via Table of Names Deep SearchSame Level FindSame Level Direct <pre><code>--Deep Search\nlocal obj = {\"A\", \"B\",\"C\",\"D\"}\nfor key, name in ipairs(names) do \n  local obj = self.parent:findByName(name, true)\nend\n</code></pre> <pre><code>--one level search\nlocal obj = {\"A\", \"B\",\"C\",\"D\"}\nfor key, name in ipairs(names) do \n  local obj = self.parent:findByName(name, false)\nend\n</code></pre> <pre><code>--Loop Thru objects\nlocal obj = {\"A\", \"B\",\"C\",\"D\"}\nfor key, name in ipairs(names) do \n  local obj = self.parent.children[name]\nend\n</code></pre>","tags":["touchosc"]},{"location":"notes/touch-osc/lua-snippets/#timers","title":"Timers","text":"Control Double-tap <pre><code>local delay = 300\nlocal last = 0\n\nfunction onValueChanged()\n  if(not self.values.touch) then\n    local now = getMillis()\n    if(now - last &lt; delay) then\n      print('double tap!')\n      last = 0\n    else\n      last = now\n    end\n  end\nend\n</code></pre> Send Periodic Message <pre><code>local delay = 1000 -- every 1000ms = 1s\nlocal last = 0\n\nfunction update()\n  local now = getMillis()\n  if(now - last &gt; delay) then\n    last = now\n    sendOSC('/ping')\n  end\nend\n</code></pre>","tags":["touchosc"]},{"location":"notes/touch-osc/lua-snippets/#accelerometer","title":"Accelerometer","text":"Get accelerometer Data <pre><code>if(hasAccelerometer()) then\n  update = function()\n    local values = getAccelerometer()\n    sendOSC('/accxyz', table.unpack(values))\n  end\nend\n</code></pre>","tags":["touchosc"]},{"location":"notes/touch-osc/properties-and-values/","title":"Properties And Values","text":"<p>This document sourced and reformatted from Hexlers Touch OSC MKII Manual.</p> Common <p>Properties</p> Name Description Since <code>name</code> A user-editable string. <code>tag</code> A user-editable string. 1.0.2.98 <code>frame</code> A\u00a0<code>Rectangle</code>\u00a0object. <code>color</code> A\u00a0<code>Color</code>\u00a0object. <code>visible</code> A boolean value. <code>interactive</code> A boolean value. <code>background</code> A boolean value. <code>outline</code> A boolean value. <code>outlineStyle</code> One of the possible values of the\u00a0<code>OutlineStyle</code>\u00a0enumeration. <code>grabFocus</code> A boolean value. <code>pointerPriority</code> One of the possible values of the\u00a0<code>PointerPriority</code>\u00a0enumeration. <code>cornerRadius</code> An integer number value ranging from\u00a0<code>0</code>\u00a0to\u00a0<code>10</code> <code>orientation</code> One of the possible values of the\u00a0<code>Orientation</code>\u00a0enumeration. <code>script</code> A string value. The control's script source code. <p>Values</p> Name Description <code>touch</code> A boolean value.\u00a0<code>true</code>\u00a0if any pointers are associated with the control in the current frame,\u00a0<code>false</code>\u00a0otherwise. For a control to be able to be associated with a pointer, its\u00a0<code>visible</code>\u00a0and\u00a0<code>interactive</code>\u00a0properties have to both be\u00a0<code>true</code> Box <p>Properties</p> Name Description <code>shape</code> One of the possible values of the\u00a0<code>Shape</code>\u00a0enumeration Button <p>Properties</p> Name Type <code>shape</code> One of the possible values of the\u00a0<code>Shape</code>\u00a0enumeration. <code>buttonType</code> One of the possible values of the\u00a0<code>ButtonType</code>\u00a0enumeration. <code>press</code> A boolean value. <code>release</code> A boolean value. <code>valuePosition</code> A boolean value. <p>Values</p> Name Description <code>x</code> A floating point value ranging from\u00a0<code>0.0</code>\u00a0to\u00a0<code>1.0</code>. Label <p>Properties</p> Name Type Since <code>font</code> One of the possible values of the\u00a0<code>Font</code>\u00a0enumeration. 1.0.4.106 <code>textSize</code> An integer value. <code>textLength</code> An integer value. <code>textAlignH</code> One of the possible values of the\u00a0<code>AlignH</code>\u00a0enumeration. <code>textAlignV</code> One of the possible values of the\u00a0<code>AlignV</code>\u00a0enumeration. <code>textColor</code> A\u00a0<code>Color</code>\u00a0object. <code>textClip</code> A boolean value. <p>Values</p> Name Description <code>text</code> A string value. Text <p>Properties</p> Name Type Since <code>font</code> One of the possible values of the\u00a0<code>Font</code>\u00a0enumeration. 1.0.4.106 <code>textSize</code> An integer value. <code>textAlignH</code> One of the possible values of the\u00a0<code>AlignH</code>\u00a0enumeration. 1.0.4.106 <code>textAlignV</code> One of the possible values of the\u00a0<code>AlignV</code>\u00a0enumeration. 1.2.1.171 <code>textColor</code> A\u00a0<code>Color</code>\u00a0object. <code>textClip</code> A boolean value. 1.2.1.171 <code>textWrap</code> A boolean value. 1.2.1.171 <p>Values</p> Name Description <code>text</code> A string value. Fader <p>Properties</p> Name Type Since <code>cursor</code> A boolean value. <code>cursorDisplay</code> One of the possible values of the\u00a0<code>CursorDisplay</code>\u00a0enumeration. <code>bar</code> A boolean value. <code>barDisplay</code> One of the possible values of the\u00a0<code>CursorDisplay</code>\u00a0enumeration. <code>centered</code> A boolean value. <code>response</code> One of the possible values of the\u00a0<code>Response</code>\u00a0enumeration. <code>responseFactor</code> An integer value ranging from\u00a0<code>1</code>\u00a0to\u00a0<code>100</code>. <code>grid</code> A boolean value. <code>gridSteps</code> An integer value. <code>gridColor</code> A\u00a0<code>Color</code>\u00a0object. 1.2.0.166 <p>Values</p> Name Description <code>x</code> A floating point value ranging from\u00a0<code>0.0</code>\u00a0to\u00a0<code>1.0</code>. XY <p>Properties</p> Name Type Since <code>cursor</code> A boolean value. <code>cursorDisplay</code> One of the possible values of the\u00a0<code>CursorDisplay</code>\u00a0enumeration. <code>lines</code> A boolean value. <code>linesDisplay</code> One of the possible values of the\u00a0<code>CursorDisplay</code>\u00a0enumeration. <code>lockX</code> A boolean value. <code>lockY</code> A boolean value. <code>response</code> One of the possible values of the\u00a0<code>Response</code>\u00a0enumeration. <code>responseFactor</code> An integer value ranging from\u00a0<code>1</code>\u00a0to\u00a0<code>100</code>. <code>gridX</code> A boolean value. <code>gridY</code> A boolean value. <code>gridStepsX</code> An integer value. <code>gridStepsY</code> An integer value. <code>gridColor</code> A\u00a0<code>Color</code>\u00a0object. 1.2.0.166 <p>Values</p> Name Description <code>x</code> A floating point value ranging from\u00a0<code>0.0</code>\u00a0to\u00a0<code>1.0</code>. <code>y</code> A floating point value ranging from\u00a0<code>0.0</code>\u00a0to\u00a0<code>1.0</code>. Radial <p>Properties</p> Name Type Since <code>inverted</code> A boolean value. <code>centered</code> A boolean value. <code>response</code> One of the possible values of the\u00a0<code>Response</code>\u00a0enumeration. <code>responseFactor</code> An integer value ranging from\u00a0<code>1</code>\u00a0to\u00a0<code>100</code>. <code>grid</code> A boolean value. <code>gridSteps</code> An integer value. <code>gridColor</code> A\u00a0<code>Color</code>\u00a0object. 1.2.0.166 <p>Values</p> Name Description <code>x</code> A floating point value ranging from\u00a0<code>0.0</code>\u00a0to\u00a0<code>1.0</code>. Encoder <p>Properties</p> Name Type Since <code>cursor</code> A boolean value. <code>cursorDisplay</code> One of the possible values of the\u00a0<code>CursorDisplay</code>\u00a0enumeration. <code>response</code> One of the possible values of the\u00a0<code>Response</code>\u00a0enumeration. <code>responseFactor</code> An integer value ranging from\u00a0<code>1</code>\u00a0to\u00a0<code>100</code>. <code>grid</code> A boolean value. <code>gridSteps</code> An integer value. <code>gridColor</code> A\u00a0<code>Color</code>\u00a0object. 1.2.0.166 <p>Values</p> Name Description <code>x</code> A floating point value ranging from\u00a0<code>0.0</code>\u00a0to\u00a0<code>1.0</code>. <code>y</code> A floating point value ranging from\u00a0<code>0.0</code>\u00a0to\u00a0<code>1.0</code>. Radar <p>Properties</p> Name Type Since <code>cursor</code> A boolean value. <code>cursorDisplay</code> One of the possible values of the\u00a0<code>CursorDisplay</code>\u00a0enumeration. <code>lines</code> A boolean value. <code>linesDisplay</code> One of the possible values of the\u00a0<code>CursorDisplay</code>\u00a0enumeration. <code>lockX</code> A boolean value. <code>lockY</code> A boolean value. <code>gridX</code> A boolean value. <code>gridY</code> A boolean value. <code>gridStepsX</code> An integer value. <code>gridStepsY</code> An integer value. <code>gridColor</code> A\u00a0<code>Color</code>\u00a0object. 1.2.0.166 <p>Values</p> Name Description <code>x</code> A floating point value ranging from\u00a0<code>0.0</code>\u00a0to\u00a0<code>1.0</code>. <code>y</code> A floating point value ranging from\u00a0<code>0.0</code>\u00a0to\u00a0<code>1.0</code>. Radio <p>Properties</p> Name Type <code>steps</code> An integer value. <code>radioType</code> One of the possible values of the\u00a0<code>RadioType</code>\u00a0enumeration. <p>Values</p> Name Description <code>x</code> An integer value ranging from\u00a0<code>0</code>\u00a0to the value of the\u00a0<code>steps</code>\u00a0property minus one. Pager <p>Properties</p> Name Type <code>tabbar</code> A boolean value. <code>tabbarSize</code> An integer value ranging from\u00a0<code>10</code>\u00a0to\u00a0<code>300</code>. <code>tabbarDoubleTap</code> A boolean value. <code>tabLabels</code> A boolean value. <code>textSizeOff</code> An integer value. <code>textSizeOn</code> An integer value. <p>Page Properties</p> Name Type <code>tabLabel</code> A string value. <code>tabColorOff</code> A\u00a0<code>Color</code>\u00a0object. <code>tabColorOn</code> A\u00a0<code>Color</code>\u00a0object. <code>textColorOff</code> A\u00a0<code>Color</code>\u00a0object. <code>textColorOn</code> A\u00a0<code>Color</code>\u00a0object. <p>Values</p> Name Description <code>page</code> An integer value ranging from\u00a0<code>0</code>\u00a0to the number of pages minus one.","tags":["touchosc"]}]}